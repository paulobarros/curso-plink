{
  "hash": "06ea2036f573eab63e4076030c97a5c1",
  "result": {
    "markdown": "---\ntitle: \"Controle de Qualidade\"\nlang: pt-BR\ncap-location: margin\ncsl: ../plos-biology.csl\nbibliography: ../referencias.bib\nengine: knitr\n---\n\n\nPara esta seção utilizaremos dados de marcadores SNP de cinco raças de Ovinos, num total de 119 indivíduos genotipados. Você pode consultar mais informações pra este dataset [aqui](datasets.qmd#sheep).\n\n:::{.callout-note}\nAo longo dos exercícios utilizaremos diversas linguagens de script como **AWK**, **SED** e **BASH**. Infelizmente não é o objetivo deste curso ensinar essas linguagens, os scripts e exemplos serão descritos da melhor maneira possível, mas para aprofundar e conhecer melhor estas linguagens recomendo uma busca no Youtube, existem diversos canais excelentes que podem auxiliar no aprendizado destas linguagens.\n:::\n\n### Arquivos `.ped` e `.map`\n\nVamos ver a estrutura dos nossos arquivos de entrada. Como [já discutimos](datafiles.qmd), o PLINK utiliza dois arquivos, um de genótipos e um de marcadores.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncut -c-100 sheep.ped | head\n```\n:::\n\n\n```\nADP ADP_3 0 0 0 U G G G C G G G G G A A A G G G C A A A A C A A A G G A A C G A A G G A A C A G C A \nADP ADP_5 0 0 0 U G G C C G G G G G A A A A G C C G A G A C C G A G A G G C C G G G G A A C A G G G \nADP ADP_6 0 0 0 U G A C C G A G A G A A A G G G C A A A A A A G A G A A G C C G G G G A A C A G C A \nADP ADP_7 0 0 0 U G A C C G G G A G A A A A G G C A A G A C A A A G G A A C G A A G G A G C A G C G \nADP ADP_8 0 0 0 U G A C C G G G A A A A A A G G C G A A A C A A A G G A G G G A A G G A A C A G C A \nADP ADP_9 0 0 0 U G A C C G G G A G A A A A G C C G G A A C A A A G G G G C G A A G G A A C A G C A \nADP ADP_11 0 0 0 U G G G C G G G G G A A A G G G C A A 0 0 C A A A G G A A G G A A G G A A C C G G A\nADP ADP_12 0 0 0 U G G C C G G G G G A A A G G G C G A G A C C A A G G A G C G G A G G A G C A G C A\nADP ADP_13 0 0 0 U G A C C G G G A A A A A A G G C G A A A C A A A G G A G C G A A G A A A C A G C A\nADP ADP_14 0 0 0 U G G C C G G G G G G A A G G G G G G A A C C A A G G A A C G G G G G A A C A G C G\n```\n\nO arquivo `.ped` está completo ([com as seis colunas iniciais](datafiles.qmd#colunas-iniciais)) e os [marcadores codificados como bases nucleotidicas](datafiles.qmd#genótipos). Nossa ID de família/população está na primeira coluna como `ADP`, se consultarmos nossa documentação do dataset veremos que é a abreviação para a raça `African Dorper`. Cada raça tem o seu ID único, assim como cada indivíduo dentro das populações, `ADP_3` é o ID do animal. Seguido das colunas de Pai, Mãe e Sexo, todas sem informação codificadas com `0` e a coluna de fenótipos codificada com a letra `U`.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat sheep.map | head \n```\n:::\n\n\n```\n1 s64199.1 0 52854\n1 OAR19_64675012.1 0 81978\n1 OAR19_64715327.1 0 120098\n1 OAR19_64803054.1 0 204694\n1 DU281551_498.1 0 315497\n1 s18939.1 0 357652\n1 OAR1_88143.1 0 401196\n1 s09912.1 0 489045\n1 s36301.1 0 580814\n1 s34880.1 0 643628\n\n```\n\nO arquivo `.map` também está no padrão que já discutimos, com a coluna do ID do cromossomo, ID do SNP, distância genética e a posição no genoma em pares de base. Utilizando o comando abaixo podemos descobrir quantos marcadores existem no total no nosso arquivo de mapa.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nwc -l sheep.map\n```\n:::\n\n\n```\n46819 sheep.map\n\n```\n\nO comando `wc` significa \"word count\" e o argumento `-l` indica que você deseja contar o número de linhas. Vemos então que o nosso número total de marcadores é de **46819 marcadores**.\n\nPodemos também consultar o número de indivíduos em cada população do nosso arquivo de genótipo.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nawk '{count[$1]++} END {for (word in count) print word, count[word]}' sheep.ped\n```\n:::\n\n\n```\nADP 21\nAWD 6\nBMN 22\nBSI 47\nBCS 23\n\n```\nExplicando o comando:\n\n* `{count[$1]++}:` Isso irá contar as ocorrências de cada palavra na primeira coluna e armazená-las em um array chamado count. O `$1` refere-se à primeira coluna do arquivo, onde está o ID da população.\n\n* `END {for (word in count) print word, count[word]}`: Isso irá percorrer o array count e imprimir cada palavra e sua respectiva contagem.\n\n### Editando arquivos\n\nOs dados que vamos utilizar estão todos em um único arquivo. Como a nossa intenção é realizar análises tanto dentro, quanto entre populações, o ideal é que façamos a edição dos arquivos de modo que cada população possua seus arquivos `.ped` e `.map` para as análises. Faremos estas edições utilizando comandos de terminal.\n\nTemos 5 populações, assim, teremos no final 5 arquivos de genótipo. O arquivo de mapa é o mesmo para todas as populações, uma vez que foram genotipadas para o mesmo chip de marcadores. No meu exemplo, eu renomeei os arquivos `.ped` e `.map` para `toPlink_Ovis` respectivamente, para facilitar no trabalho com os dados.\n\n#### Separando as populações\n\nPara separar as populações vamos utilizar o código abaixo, basta copiar e colar no seu editor de texto e salvar com o nome de sua preferência desde que o formato seja `.sh`. No meu caso eu salvei este código num arquivo chamado `split_pop.sh`. Lembre de que para executar qualquer arquivo é necessário fornecer [permissão de execução](runplink.qmd#lst-chmod).\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n#!/usr/bin/env bash\n\n# Array com 5 elementos contendo os padrões\npopulacoes=($(awk '!arr[$1]++ {print $1}' toPlink_Ovis.ped))\n\n# Loop através do array para processar cada padrão\nfor populacao in \"${populacoes[@]}\"\ndo\n    echo $populacao\n    # Cria um diretório com o nome do padrão (população)\n    mkdir -p \"$populacao\"\n    \n    #Executa o comando AWK para o padrão atual e salva a saída em um arquivo\n    # dentro do dirétório criado para a população\n    awk -v pop=\"$populacao\" '$1 ~ pop {print}' \\\n    toPlink_Ovis.ped > \"$populacao/$populacao\"_toPlink.ped\n    \n    cp toPlink_Ovis.map \"$populacao/$populacao\"_toPlink.map\ndone\n\n```\n:::\n\n\n\nA primeira linha `#!/usr/bin/env bash` informa o interpretador a ser usado para executar o script, que neste caso é o Bash.\n\nA variável `populacoes` é definida como um array com 5 elementos contendo os padrões. A construção do array é feita usando o comando `awk`. Este comando busca no arquivo `toPlink_Ovis.ped` a primeira coluna que contém padrões, ou seja, linhas com valores únicos na primeira coluna. Cada padrão encontrado é armazenado em uma posição do array `populacoes`.\n\nEm seguida, o script entra em um loop for que percorre cada elemento do array `populacoes`. Para cada elemento, o script executa as seguintes ações:\n\n* Cria um diretório com o nome do padrão usando o comando `mkdir -p \"$populacao\"`\n\n* Executa o comando `awk` dentro do diretório criado para buscar todas as linhas do arquivo `toPlink_Ovis.ped` que correspondem ao padrão atual, usando a variável `populacao` como argumento, e redireciona a saída para um arquivo com o nome `\"populacao/populacao_toPlink.ped\"`\n\n* Copia o arquivo `toPlink_Ovis.map` para o diretório criado, com o nome `\"populacao/populacao_toPlink.map\"`\n\nResumindo, o script separa os dados do arquivo `toPlink_Ovis.ped` em diretórios separados com base nos padrões encontrados na primeira coluna, que no caso são os nomes das nossas populações, produzindo um arquivo `populacao_toPlink.ped` e um arquivo `populacao_toPlink.map` em cada diretório correspondente.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ntree\n```\n:::\n\n\n```\n.\n├── ADP\n│   ├── ADP_toPlink.map\n│   └── ADP_toPlink.ped\n├── AWD\n│   ├── AWD_toPlink.map\n│   └── AWD_toPlink.ped\n├── BCS\n│   ├── BCS_toPlink.map\n│   └── BCS_toPlink.ped\n├── BMN\n│   ├── BMN_toPlink.map\n│   └── BMN_toPlink.ped\n├── BSI\n│   ├── BSI_toPlink.map\n│   └── BSI_toPlink.ped\n├── licensed_data.txt\n├── marker_ID_info.txt\n├── plink\n├── selection.txt\n├── split_pop.sh\n├── toPlink_Ovis.map\n└── toPlink_Ovis.ped\n\n```\n\n### Criando arquivos Binários\n\nComo já discutimos, a depender do número de marcadores, pode ser mais eficiente que transformemos os nossos arquivos de genótipo e mapa em um arquivo binário. O PLINK faz isso de forma automática para nós por meio de uma _flag_ de comando. A partir de agora faremos a importação dos arquivos, a transformação para o formato binário, e todo o processo de controle de qualidade em um único comando. Primeiro vamos entender as _flags_ que utilizaremos para o QC no PLINK. Depois criaremos um novo script em Bash que fará os passos necessários para nosso controle de qualidade para cada população.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nplink --file arquivo.ped \\\n    --maf 0.05 \\\n    --geno 0.05 \\\n    --mind 0.10 \\\n    --hwe 1e-60 midp include-nonctrl \\\n    --nonfounders \\\n    --sheep \\\n    --allow-extra-chr \\\n    --indep-pairwise 50 5 0.4 \\\n    --make-bed \\\n    --threads 8 \\\n    --out binary\n```\n:::\n\n\nAgora vamos entender tudo o que está acontecendo no código acima:\n\n* `--file arquivo.ped`: Especifica o nome do arquivo PED a ser utilizado como entrada. Esse arquivo contém informações sobre as amostras genéticas e seus genótipos.\n\n* `--maf 0.05`: Remove todos os loci com frequência alélica menor do que 0,05. Isso significa que apenas loci com pelo menos 5% dos alelos terão suas informações preservadas.\n\n* `--geno 0.05`: Remove todos os indivíduos com mais de 5% dos loci genotipados ausentes (faltantes). Isso significa que os indivíduos que têm muitos dados ausentes serão removidos da análise.\n\n* `--mind 0.10`: Remove todos os loci com mais de 10% dos genótipos faltantes. Isso significa que os loci que têm muitos dados ausentes serão removidos da análise.\n\n* `--hwe 1e-60 midp include-nonctrl`: Remove todos os loci que apresentam desequilíbrio de Hardy-Weinberg (HWE) com valor de p menor do que 1e-60 (1x10<sup>-60</sup>). O parâmetro `midp` é utilizado para calcular o valor de _p_ e a opção `include-nonctrl` especifica que devem ser incluídos no cálculo os indivíduos que não são controles.\n\n* `--nonfounders`: Remove todos os indivíduos que não são fundadores, ou seja, indivíduos que têm pelo menos um pai no arquivo de entrada.\n\n* `--sheep`: Especifica que os dados são de ovinos.\n\n* `--allow-extra-chr`: Permite a inclusão de cromossomos extras.\n\n* `--indep-pairwise 50 5 0.4`: Realiza a análise de **LD pruning**, ou seja, remove marcadores que estão em desequilíbrio de ligação (LD) uns com os outros. Nesse caso, ele irá reter apenas um marcador de cada par de marcadores que têm uma correlação maior do que 0,4, dentro de janelas de 50 SNPs e passo de 5 SNPs.\n\n* `--make-bed`: Especifica que o arquivo de saída será no formato BED, que é um **formato de arquivo binário** usado pelo PLINK.\n\n* `--threads 8`: Especifica o número de threads (ou processos paralelos) que serão utilizados na análise.\n\n* `--out binary`: Especifica o nome do arquivo de saída. Nesse caso, o arquivo de saída será chamado \"binary\".\n\n\n\n:::{.callout-note}\nQuando o PLINK faz a leitura das _flags_, ele as lê de maneira sequencial. Como são muitas, a depender da análise, escrever o script em BASH fica mais legível do que tentar copiar inúmeras flags em sequência no terminal. O caracter de `\\` em um script BASH informa ao terminal uma quebra de linha, isso facilita a legibilidade do código, mas internamente, na execução do programa, os comando são lidos como se estivessem em uma única linha de código.\n:::\n\nDuas flags importantes a observar no comando PLINK acima. A flag `--file` indica que ainda estamos fazendo a leitura de um arquivo `.ped`. E a flag `--make-bed` é o comando que converte nossos arquivos em um formato binário.\n\n### Parâmetros do QC\n\nÉ importante compreender os parâmetros adotados no QC (_quality control_). Alguns parâmetros são já estabelecidos como base na literatura, mas outros dependem da especificidade do projeto, dos objetivos e principalmente do número de marcadores disponíveis. De modo mais simples, quando trabalhamos com chips de alta densidade, com um número grande de marcadores, podemos ser mais restritivos quanto a alguns dos parâmetros do QC, eliminando assim um número maior de marcadores. Entretanto, se trabalhamos com poucas amostras e um chip de baixa densidade de marcadores, deve-se levar em consideração o objetivo do trabalho e o quanto mais flexíveis podemos ser em relação ao QC visando maximizar o número de marcadores restantes, sem prejudicar a acurácia das estatísticas obtidas. Uma boa discussão sobre QC em estudos de GWAS veja Gondro [@gondro2013genome; @gondro2014snpqc].\n\n### Criando Script de QC\n\nVamos agora criar um script em BASH que navegue pelos diretórios onde encontram-se os dados de cada população, e gere nossos arquivos binários e faça também o QC para cada população. Novamente, basta criar um arquivo com extensão `.sh` e executar. No meu caso chamei de `pop_QC.sh`.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n#!/usr/bin/env bash\n\n# Array com 5 elementos contendo os padrões\npopulacoes=($(awk '!arr[$1]++ {print $1}' toPlink_Ovis.ped))\n\n# Loop para realização do QC em cada população\n# e criação dos arquivos Binários\nfor populacao in \"${populacoes[@]}\"\ndo\n\techo \"Realizando QC para a população: $populacao ...\"\n\tcd \"$populacao\"\n\t\n\tplink --file \"$populacao\"_toPlink \\\n    --maf 0.05 \\\n    --geno 0.05 \\\n    --mind 0.10 \\\n    --hwe 1e-60 midp include-nonctrl \\\n    --nonfounders \\\n    --sheep \\\n    --allow-extra-chr \\\n    --indep-pairwise 50 5 0.4 \\\n    --make-bed \\\n    --threads 8 \\\n    --out binary\n    \n    echo \"QC e Arquivos binários criados para $populacao !\"\n    cd ..\n\t\n\t\ndone\n```\n:::\n\n\nA primeira linha `#!/usr/bin/env bash` indica que o interpretador de comandos utilizado será o bash.\n\nA linha seguinte cria um array chamado `populacoes` que armazena os nomes das populações presentes no arquivo `toPlink_Ovis.ped`. O comando `awk` é usado para identificar os nomes únicos de população na primeira coluna do arquivo `toPlink_Ovis.ped` e armazená-los em um array.\n\nEm seguida, o script utiliza um loop for para iterar através de cada população no array `populacoes`. Para cada população, o script muda para o diretório correspondente utilizando o comando `cd` e, em seguida, executa o comando PLINK (que foi explicado no passo anterior) para realizar o QC e criar os arquivos binários para essa população.\n\nO comando `echo` é usado para imprimir uma mensagem informando qual população está sendo processada e quando os arquivos binários foram criados. O comando `cd ..` é usado para voltar ao diretório original antes de prosseguir para a próxima população.\n\nSe tudo deu certo, veremos que nas pastas das nossas populações temos agora os arquivos binários criados pelo PLINK, bem como outros arquivos de suporte.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ntree\n```\n:::\n\n\n```\n.\n├── ADP_toPlink.map\n├── ADP_toPlink.ped\n├── binary.bed\n├── binary.bim\n├── binary.fam\n├── binary.log\n├── binary.nosex\n├── binary.prune.in\n└── binary.prune.out\n\n```\n\nTemos os nossos arquivos `.ped` e `.map` originais da população. O PLINK criou uma série de arquivos com o nome  `binary` já que esta foi a opção de saída que informamos com a flag  `--out`. Os arquivos com extensão `.bed`, `.bim` e `.fam` são os novos arquivos que o PLINK utilizará nas análises seguintes. O arquivo `.log` é muito importante pois é um registro de todos os passos que foram realizados na execução do código, nele podemos identificar as mensagens de erro caso ocorram, o que é mais fácil do que rolar o terminal. O arquivo `.nosex` contém as informações sobre o sexo dos indivíduos no arquivo de genótipo. No nosso caso, como não temos a informação de sexo, vocês verão que o que consta neste arquivo é simplesmente o ID da Família/População e do indivíduo.\n\nDois arquivos são extremamente importantes, os arquivos `.prune.in` e `prune.out`. São os arquivos que contém as informações de _prunning_ (filtro) dos marcadores. O arquivo `.in` possui a ID dos marcadores que passaram no QC, e o `.out` os marcadores que foram removidos por falhar no QC. Estes arquivos contém somente o identificador do SNP, então podemos facilmente saber o número de marcadores excluídos no processo de QC para esta população.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nwc -l binary.prune.out\n```\n:::\n\n\n```\n26982 binary.prune.out\n```\n\nNosso número original de marcadores era de 46819 SNPs. Isso significa que aproximadamente 57% dos marcadores para esta população foram removidos com base nos nossos parâmetros de QC. Um número bastante significativo. Faça o exercício de rodar novamente o QC para esta população alterando alguns dos parâmetros do QC e veja a diferença no número de marcadores mantidos ou excluídos. Principalmente em parâmetros relacionados a LD como `--indep-pairwise 50 5 0.4`. Consulte a [documentação do PLINK](https://www.cog-genomics.org/plink/1.9/ld#indep) caso tenha dúvidas em como alterar esta flag.\n\n\n\n::: {#refs}\n**Referências**\n:::",
    "supporting": [
      "qc_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}