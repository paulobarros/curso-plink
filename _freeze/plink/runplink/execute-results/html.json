{
  "hash": "1247cb38e3bb5d83053bc1b26c178269",
  "result": {
    "markdown": "---\ntitle: \"Rodando o PLINK\"\nlang: pt-BR\ncap-location: margin\ncsl: ../plos-biology.csl\nbibliography: ../referencias.bib\nengine: knitr\n---\n\n\n\n::: {.callout-important}\n\nMeu sistema operacional é o Pop_OS!, uma distro Linux. Mesmo possuindo uma interface gráfica, muitos dos comandos e prints de tela que vocês verão nos exemplos serão executados em terminal já que em muitas das vezes a depender do volume de dados, as análises são realizadas em servidores com um maior poder computacional. Estes computadores muito provavelmente estarão rodando alguma versão de servidor do Linux sem uma interface gráfica, então é mais útil que vocês já se familiarizem com os comandos de terminal.\n\nVou adotar sempre o mesmo esquema, o bloco de código com o comando utilizado, seguido pela saída do comando no terminal. Por exemplo:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ntree\n```\n:::\n\n\nE logo abaixo a resposta daquele comando.\n\n```\n.\n├── folder1\n└── folder2\n\n```\n\n:::\n\n\n\nQuando fazemos o download do PLINK 1.9 observamos os seguintes arquivos:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ntree\n```\n:::\n\n\n```\n.\n├── LICENSE   -> arquivo de licença do PLINK\n├── plink     -> executável do PLINK\n├── prettify  -> utilitário para gerar tabelas formatadas\n├── toy.map   -> arquivo .MAP de exemplo\n└── toy.ped   -> arquivo .PED de exemplo\n```\n\nPodemos usar o terminal para ver a cara do aquivo de genótipo e de mapa usando o comando `cat` para imprimir o arquivo na tela do terminal.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat toy.ped \n```\n:::\n\n\n```\n1 1000000000 0 0 1 1 0 0 A A\n1 1000000001 0 0 1 2 C C A G\n\n``` \n\nComo podemos ver o arquivo de exemplo possui as [seis colunas iniciais](datafiles.qmd#colunas-iniciais) de um arquivo `.ped`, seguidas dos genótipos de dois marcadores codificados como bases nucleotídicas. Já no arquivo `.map` vamos observar [quatro colunas](datafiles.qmd#map-files) e duas linhas, referentes aos dois marcadores no nosso arquivo de genótipo.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat toy.map\n```\n:::\n\n\n```\n1\trs0     0   1000\n1\trs10    0   1001\n```\n\n### Invocando o executável\n\nO arquivo `plink` é um arquivo binário que não requer instalação, basta a sua invocação seguido das opções de comando para que ele execute alguma função. \n\n::: {#fig-exe}\n\n![](../images/plink_exe.png)\n\nExecutável do PLINK\n\n:::\n\nObserve na @fig-exe que as cores são diferentes para os dois arquivos binários `plink` e `prettify` quando comparados aos arquivos `.map` e `.ped`. Isso porque que os arquivos possuem **permissão de execução**. O comando `ls` no linux lista os arquivos em um diretório. Caso no seu diretório estes arquivos não apareçam marcados com cores diferentes, você pode utilizar o comando `ls -la` para listar as atuais permissões dos arquivos.\n\n::: {#fig-ls}\n\n![](../images/plink_exe_2.png)\n\nListando permissões de arquivos\n\n:::\n\n\nObserve que tanto o `plink` quanto `prettify` estão setados com as permissões `-rwxrwxr-x paulo`. Em resumo, as letras `r`, `w` e `x` referem-se respectivamente aos modos de **leitura** (_read_), **escrita** (_write_) e **execução** (_execution_). Caso necessite fornecer permissão de execução para o binário do `plink`pode fazer com o comando abaixo:\n\n```{#lst-chmod .bash lst-cap=\"Execução de Permissão\"}\n#| eval: false\nsudo chmod +x plink prettify\n```\n\nE como não custa nada lembrar {{< fa hand-point-right >}} {{< fa brands linux >}} [Material Introdução ao Linux](https://paulobarros.github.io/introducao-ao-linux/) \n\n\n### Rodando arquivos exemplo\n\nTudo certo com nossas permissões, podemos então executar o PLINK pela primeira vez. Para isso basta chamar invocar o executável no terminal. Em Linux, quando desejamos rodar algum executável, seja um binário ou arquivo de script, basta utilizar `./` antes do nome do comando para invocar a sua execução. No nosso caso utilizaremos `./plink` no terminal para sua execução.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n./plink \n```\n:::\n\n\n```\nPLINK v1.90b7 64-bit (16 Jan 2023)             www.cog-genomics.org/plink/1.9/\n(C) 2005-2023 Shaun Purcell, Christopher Chang   GNU General Public License v3\n\n  plink <input flag(s)...> [command flag(s)...] [other flag(s)...]\n  plink --help [flag name(s)...]\n\nCommands include --make-bed, --recode, --flip-scan, --merge-list,\n--write-snplist, --list-duplicate-vars, --freqx, --missing, --test-mishap,\n--hardy, --mendel, --ibc, --impute-sex, --indep-pairphase, --r2, --show-tags,\n--blocks, --distance, --genome, --homozyg, --make-rel, --make-grm-gz,\n--rel-cutoff, --cluster, --pca, --neighbour, --ibs-test, --regress-distance,\n--model, --bd, --gxe, --logistic, --dosage, --lasso, --test-missing,\n--make-perm-pheno, --tdt, --qfam, --annotate, --clump, --gene-report,\n--meta-analysis, --epistasis, --fast-epistasis, and --score.\n\n\"plink --help | more\" describes all functions (warning: long).\n\n```\nAo invocar o PLINK sem nenhuma das suas _flags_, ele simnplesmente exibe na tela uma rápida ajuda do programa, mostrando algumas das _flags_ aceitas e também como invocar a ajuda do programa. Podemos então fazer a leitura dos arquivos de exemplo `toy.ped` e `toy.map`.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n./plink --file toy --freq --out toy_analysis\n```\n:::\n\n\n```\nPLINK v1.90b7 64-bit (16 Jan 2023)             www.cog-genomics.org/plink/1.9/\n(C) 2005-2023 Shaun Purcell, Christopher Chang   GNU General Public License v3\nLogging to toy_analysis.log.\nOptions in effect:\n  --file toy\n  --freq\n  --out toy_analysis\n\n15880 MB RAM detected; reserving 7940 MB for main workspace.\n.ped scan complete (for binary autoconversion).\nPerforming single-pass .bed write (2 variants, 2 people).\n--file: toy_analysis-temporary.bed + toy_analysis-temporary.bim +\ntoy_analysis-temporary.fam written.\n2 variants loaded from .bim file.\n2 people (2 males, 0 females) loaded from .fam.\n2 phenotype values loaded from .fam.\nUsing 1 thread (no multithreaded calculations invoked).\nBefore main variant filters, 2 founders and 0 nonfounders present.\nCalculating allele frequencies... done.\nTotal genotyping rate is 0.75.\n--freq: Allele frequencies (founders only) written to toy_analysis.frq .\n\n```\n\nAlgumas informações importantes nesta nova saída. O PLINK agora informa quais opções foram invocadas:\n\n```\nOptions in effect:\n  --file toy\n  --freq\n  --out toy_analysis\n\n```\n\nAs opções utilizadas foram `--file` , `--freq` e `--out`. Tudo o que é seguido de um comando, chamamos de parâmetro. Por exemplo, o comando `--file` é seguido do parâmetro `toy`, assim como o comando `--out` é seguido do parâmetro `toy_analysis`. Nem todo comando obrigatoriamente necessita de um parâmetro subsequente, como é o caso do comando `--freq`. Vamos tentar entender agora o que cada comando significa neste exemplo.\n\n* `--file toy` : este comando diz ao PLINK para utilizar os arquivos de entrada na pasta. No nosso caso possuímos dois arquivos `toy.ped` e `toy.map`, como o nome do arquivo é idêntico alterando somente a sua extenção, o comando automaticamente busca estes arquivos na pasta e faz a sua leitura.\n\n* `--freq`  :  este comando informa ao PLINK para gerar um relatório de frequências alélicas. A [{{< fa book size=lg >}}     documentação do plink](https://www.cog-genomics.org/plink/1.9/data) [@plinkdoc] oferece a descrição de todas as funções disponíveis, e também as configurações dos arquivos de saída para cada função.\n\n* `--out` : por padrão, todos os arquivos de resultado do PLINK são nomeados `plink.alguma_extensao`, o paramertro `toy_analysis` diz ao plink para alterar este padrão, dessa maneira o resultado será nomeado `toy_analysis.alguma_extensao`, por exemplo, no caso da análise que acabamos de executar, será criado o arquivo `toy_analysis.frq`, já que `.frq` é a extensão padrão da saída do comando `--freq`.\n\nExistem modificadores que podem ser utilizados em conjunto com os comandos, para saber a maneira correta de utilização basta recorrer a documentação.\n\n### Arquivos de Saída\n\nSe tudo correu bem, devemos ter na nossa pasta novos arquivos gerados pelo PLINK\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ntree\n```\n:::\n\n\n```\n.\n├── LICENSE\n├── plink\n├── prettify\n├── toy_analysis.frq\n├── toy_analysis.log\n├── toy.map\n└── toy.ped\n\n```\n\nAgora aparecem no nosso diretório os arquivos `toy_analysis.frq`, que é o arquivo de saída do comando `--freq` e o arquivo `toy_analysis.log`. Vamos dar uma olhada mais de perto no arquivo da nossa análise das frequências alélicas.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat toy_analysis.frq\n```\n:::\n\n\n```\n CHR  SNP   A1   A2          MAF  NCHROBS\n   1  rs0    0    C            0        2\n   1 rs10    G    A         0.25        4\n``` \n\nO nosso arquivo de resultado nos mostra:\n\n * `CHR`: o identificador do cromossomo\n \n * `SNP`: o identificador do SNP\n \n * `A1`: o alelo menor\n \n * `A2`: o alelo maior\n \n * `MAF`: a frequência do alelo menor (_minor allele frequency_)\n \n * `NCHROBS`: o numero de alelos observados por SNP\n \n Na documentação é possível encontrar outras formas de pedir o cálculo das frequências alélicas.\n \n Você pode abrir o arquivo `toy_analysis.log` no seu editor de texto e verá que ele é um registro de todas as mensagens que o PLINK exibiu no terminal durante a execuçào. Esse arquivo é muito importante na hora de identificar erros na leitura de arquivos, ou na execução de comandos, esteja sempre atento as mensagens!\n\nTranquilo até aqui? Nas próximas seções vamos trabalhar chips SNPs disponíveis na internet e realizar análises mais aprofundadas. Em cada caso, será informado o _dataset_ que estaremos utilizando para as análises, bem como informações de download e especificações. Todos os dados utilizados aqui estão públicos disponíveis na internet. \n\n\n::: {#refs}\n**Referências**\n:::",
    "supporting": [
      "runplink_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}